<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="a00038" kind="file" language="C++">
    <compoundname>VkDescriptors.cpp</compoundname>
    <includes refid="a00041" local="yes">VkDescriptors.h</includes>
    <incdepgraph>
      <node id="1">
        <label>VkDescriptors.cpp</label>
        <link refid="a00038"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>VkDescriptors.h</label>
        <link refid="a00041"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>VkTypes.h</label>
        <link refid="a00074"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="18">
        <label>VkBootstrap.h</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="13">
        <label>chrono</label>
      </node>
      <node id="11">
        <label>deque</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="23">
        <label>glm/common.hpp</label>
      </node>
      <node id="22">
        <label>glm/glm.hpp</label>
      </node>
      <node id="20">
        <label>glm/mat4x4.hpp</label>
      </node>
      <node id="21">
        <label>glm/vec4.hpp</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="5">
        <label>optional</label>
      </node>
      <node id="8">
        <label>span</label>
      </node>
      <node id="19">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="14">
        <label>thread</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="17">
        <label>vk_mem_alloc.h</label>
      </node>
      <node id="16">
        <label>vulkan/vk_enum_string_helper.h</label>
      </node>
      <node id="15">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>allos<sp/>on<sp/>2/10/2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="a00041" kindref="compound">VkDescriptors.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00182_1afc94cce99812e98162990b38dc7a2fd0" kindref="member">DescriptorLayoutBuilder::addBinding</ref>(uint32_t<sp/>binding,<sp/>VkDescriptorType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding<sp/>newBind{};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>newBind.binding<sp/>=<sp/>binding;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>newBind.descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>newBind.descriptorType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00182_1a84964bc1535f1164c65c682d8abc1ae6" kindref="member">bindings</ref>.push_back(newBind);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00182_1a458ab671e6690342e749cd8f71bb41bc" kindref="member">DescriptorLayoutBuilder::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00182_1a84964bc1535f1164c65c682d8abc1ae6" kindref="member">bindings</ref>.clear();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">VkDescriptorSetLayout<sp/><ref refid="a00182_1a797241e8070455929166f95a9de86163" kindref="member">DescriptorLayoutBuilder::build</ref>(VkDevice<sp/>device,<sp/>VkShaderStageFlags<sp/>shaderStages)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b:<sp/><ref refid="a00182_1a84964bc1535f1164c65c682d8abc1ae6" kindref="member">bindings</ref>)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.stageFlags<sp/>|=<sp/>shaderStages;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutCreateInfo<sp/>info<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,<sp/>.pNext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>info.pBindings<sp/>=<sp/><ref refid="a00182_1a84964bc1535f1164c65c682d8abc1ae6" kindref="member">bindings</ref>.data();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>info.bindingCount<sp/>=<sp/>(uint32_t)<ref refid="a00182_1a84964bc1535f1164c65c682d8abc1ae6" kindref="member">bindings</ref>.size();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>info.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/>set;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00074_1a3d55e176cc77828a9adaa05ac4413b99" kindref="member">VK_CHECK</ref>(vkCreateDescriptorSetLayout(device,<sp/>&amp;info,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;set));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00186_1af462a503a5c26ba20338c56d009eea48" kindref="member">DescriptorAllocator::initPool</ref>(VkDevice<sp/>device,<sp/>uint32_t<sp/>maxSets,<sp/>std::span&lt;PoolSizeRatio&gt;<sp/>poolRatios)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkDescriptorPoolSize&gt;<sp/>poolSizes;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PoolSizeRatio<sp/>ratio<sp/>:<sp/>poolRatios)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poolSizes.push_back(VkDescriptorPoolSize{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>ratio.type,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorCount<sp/>=<sp/>uint32_t(ratio.ratio<sp/>*<sp/>maxSets)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.maxSets<sp/>=<sp/>maxSets;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.poolSizeCount<sp/>=<sp/>(uint32_t)poolSizes.size();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.pPoolSizes<sp/>=<sp/>poolSizes.data();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCreateDescriptorPool(device,<sp/>&amp;poolInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="a00186_1a51150b1aad092cd0707378078ec0e35c" kindref="member">pool</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00186_1a7824d1b20b807681a834dd53c0bd1315" kindref="member">DescriptorAllocator::clearDescriptors</ref>(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>vkResetDescriptorPool(device,<sp/><ref refid="a00186_1a51150b1aad092cd0707378078ec0e35c" kindref="member">pool</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00186_1a574cc72d9888d2cf0a4ab77fa56093d7" kindref="member">DescriptorAllocator::destroyPool</ref>(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(device,<sp/><ref refid="a00186_1a51150b1aad092cd0707378078ec0e35c" kindref="member">pool</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">VkDescriptorSet<sp/><ref refid="a00186_1a334e8652789e38e59f911c89aeea2dc6" kindref="member">DescriptorAllocator::allocate</ref>(VkDevice<sp/>device,<sp/>VkDescriptorSetLayout<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetAllocateInfo<sp/>allocInfo<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.pNext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorPool<sp/>=<sp/><ref refid="a00186_1a51150b1aad092cd0707378078ec0e35c" kindref="member">pool</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorSetCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.pSetLayouts<sp/>=<sp/>&amp;layout;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/>ds;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00074_1a3d55e176cc77828a9adaa05ac4413b99" kindref="member">VK_CHECK</ref>(vkAllocateDescriptorSets(device,<sp/>&amp;allocInfo,<sp/>&amp;ds));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ds;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00194_1af5cae4856149623867934153486e9b45" kindref="member">DescriptorAllocatorGrowable::init</ref>(VkDevice<sp/>device,<sp/>uint32_t<sp/>maxSets,<sp/>std::span&lt;PoolSizeRatio&gt;<sp/>poolRatios)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ratios.clear();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>poolRatios)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratios.push_back(r);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>newPool<sp/>=<sp/>createPool(device,<sp/>maxSets,<sp/>poolRatios);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>setsPerPool<sp/>=<sp/>maxSets<sp/>*<sp/>1.5;<sp/></highlight><highlight class="comment">//<sp/>grow<sp/>for<sp/>next<sp/>alloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>readyPools.push_back(newPool);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00194_1a4fbeabc0aea9829cf922f7e9cce2fa53" kindref="member">DescriptorAllocatorGrowable::clearPools</ref>(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>readyPools)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkResetDescriptorPool(device,<sp/>p,<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>fullPools)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkResetDescriptorPool(device,<sp/>p,<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readyPools.push_back(p);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>fullPools.clear();</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00194_1a9be93476cebaaba27b5e6a41650b1c25" kindref="member">DescriptorAllocatorGrowable::destroyPools</ref>(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:readyPools)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(device,<sp/>p,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>readyPools.clear();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>fullPools)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(device,<sp/>p,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>fullPools.clear();</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">VkDescriptorSet<sp/><ref refid="a00194_1a6db84a1399339f8008d6a0745383b591" kindref="member">DescriptorAllocatorGrowable::allocate</ref>(VkDevice<sp/>device,<sp/>VkDescriptorSetLayout<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>or<sp/>create<sp/>a<sp/>pool<sp/>to<sp/>alloc<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>poolToUse<sp/>=<sp/>getPool(device);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetAllocateInfo<sp/>allocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.pNext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorPool<sp/>=<sp/>poolToUse;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorSetCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.pSetLayouts<sp/>=<sp/>&amp;layout;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/>ds;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>result<sp/>=<sp/>vkAllocateDescriptorSets(device,<sp/>&amp;allocInfo,<sp/>&amp;ds);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>failed<sp/>try<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>VK_ERROR_OUT_OF_POOL_MEMORY<sp/>||<sp/>result<sp/>==<sp/>VK_ERROR_FRAGMENTED_POOL)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullPools.push_back(poolToUse);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poolToUse<sp/>=<sp/>getPool(device);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocInfo.descriptorPool<sp/>=<sp/>poolToUse;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00074_1a3d55e176cc77828a9adaa05ac4413b99" kindref="member">VK_CHECK</ref>(vkAllocateDescriptorSets(device,<sp/>&amp;allocInfo,<sp/>&amp;ds));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>readyPools.push_back(poolToUse);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ds;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">VkDescriptorPool<sp/>DescriptorAllocatorGrowable::getPool(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>newPool;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readyPools.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPool<sp/>=<sp/>readyPools.back();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readyPools.pop_back();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>readypools<sp/>:(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPool<sp/>=<sp/>createPool(device,<sp/>setsPerPool,<sp/>ratios);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setsPerPool<sp/>=<sp/>setsPerPool<sp/>*<sp/>1.5;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setsPerPool<sp/>&gt;<sp/>4092)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setsPerPool<sp/>=<sp/>4092;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPool;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">VkDescriptorPool<sp/>DescriptorAllocatorGrowable::createPool(VkDevice<sp/>device,<sp/>uint32_t<sp/>setCount,<sp/>std::span&lt;PoolSizeRatio&gt;<sp/>poolRatios)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkDescriptorPoolSize&gt;<sp/>poolSizes;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PoolSizeRatio<sp/>ratio<sp/>:<sp/>ratios)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poolSizes.push_back(VkDescriptorPoolSize{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>ratio.type,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorCount<sp/>=<sp/>uint32_t(ratio.ratio<sp/>*<sp/>setCount)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.maxSets<sp/>=<sp/>setCount;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.poolSizeCount<sp/>=<sp/>(uint32_t<sp/>)poolSizes.size();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.pPoolSizes<sp/>=<sp/>poolSizes.data();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>newPool;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00074_1a3d55e176cc77828a9adaa05ac4413b99" kindref="member">VK_CHECK</ref>(vkCreateDescriptorPool(device,<sp/>&amp;poolInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;newPool));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPool;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00202_1a2a892146e50f1e47f2e5e2f84fb0eb66" kindref="member">DescriptorWriter::writeImage</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binding,<sp/>VkImageView<sp/>image,<sp/>VkSampler<sp/>sampler,<sp/>VkImageLayout<sp/>layout,<sp/>VkDescriptorType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorImageInfo&amp;<sp/>info<sp/>=<sp/><ref refid="a00202_1a1a8fd25b760653c787354b53792fd123" kindref="member">imageInfos</ref>.emplace_back(VkDescriptorImageInfo{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sampler<sp/>=<sp/>sampler,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageView<sp/>=<sp/>image,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageLayout<sp/>=<sp/>layout</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>VkWriteDescriptorSet<sp/>write<sp/>=<sp/>{<sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET<sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>write.dstBinding<sp/>=<sp/>binding;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>write.dstSet<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>write.pImageInfo<sp/>=<sp/>&amp;info;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>.push_back(write);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00202_1a24d1efff56cfd0a03ffe5aa3ce7e17bf" kindref="member">DescriptorWriter::writeBuffer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binding,<sp/>VkBuffer<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/>VkDescriptorType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorBufferInfo&amp;<sp/>info<sp/>=<sp/><ref refid="a00202_1ab4afed3f867ffe490c2bcb18d739d5fc" kindref="member">bufferInfos</ref>.emplace_back(VkDescriptorBufferInfo{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>buffer,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offset,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.range<sp/>=<sp/>size</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>VkWriteDescriptorSet<sp/>write<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET<sp/>};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>write.dstBinding<sp/>=<sp/>binding;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>write.dstSet<sp/>=<sp/>VK_NULL_HANDLE;<sp/></highlight><highlight class="comment">//<sp/>left<sp/>empty<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>write.pBufferInfo<sp/>=<sp/>&amp;info;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>.push_back(write);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00202_1ad2f603a5f4382aeed806d6a25f4fc9d9" kindref="member">DescriptorWriter::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00202_1a1a8fd25b760653c787354b53792fd123" kindref="member">imageInfos</ref>.clear();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>.clear();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a00202_1ab4afed3f867ffe490c2bcb18d739d5fc" kindref="member">bufferInfos</ref>.clear();</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00202_1aa6d2deed567c313417fc333e55647814" kindref="member">DescriptorWriter::updateSet</ref>(VkDevice<sp/>device,<sp/>VkDescriptorSet<sp/>set)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VkWriteDescriptorSet&amp;<sp/>write<sp/>:<sp/><ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write.dstSet<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUpdateDescriptorSets(device,<sp/>(uint32_t)<ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>.size(),<sp/><ref refid="a00202_1ac22018161ff02865aa9ef6e652c89d5e" kindref="member">writes</ref>.data(),<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/allos/source/Catos/Runtime/src/Renderer/VkDescriptors.cpp"/>
  </compounddef>
</doxygen>
